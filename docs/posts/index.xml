<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 大大很二</title>
        <link>https://russellgao.cn/posts/</link>
        <description>所有文章 | 大大很二</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>1060745366@qq.com (高维宗(russellgao))</managingEditor>
            <webMaster>1060745366@qq.com (高维宗(russellgao))</webMaster><lastBuildDate>Mon, 17 May 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://russellgao.cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>初识 ETCD </title>
    <link>https://russellgao.cn/etcd-intro/</link>
    <pubDate>Mon, 17 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/etcd-intro/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gitee.com/russellgao/blogs-image/raw/master/images/etcd/etcd-horizontal-color.svg" referrerpolicy="no-referrer">
            </div>导读  本文简单介绍了 Etcd ，主要是学习 etcd 时记录的操作过程，适合小白入门时阅读。
 介绍 etcd是使用Go语言开发的一个开源的、高可用的分布式key-value存储系统，可以用于配置共享和服务的注册和发现。etcd具有以下特点：]]></description>
</item><item>
    <title>CUE Use Cases</title>
    <link>https://russellgao.cn/cue-usecase/</link>
    <pubDate>Wed, 12 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/cue-usecase/</guid>
    <description><![CDATA[导读  CUE可用于与数据相关的广泛的连续应用中。本节讨论了CUE如何在各种应用领域提供优势。
本文主要内容来自于官方文档。
 配置  管理基于文本的文件，以定义一个系统的期望状态。
 可以说，验证应该是任何配置语言的首要任务。然而，大多数配置语言的重点是去除模板。CUE的不同之处在于，它采取了验证优先的立场。但CUE的约束条件也能有效地减少模板，尽管它采取的方法与传统的数据模板语言有很大的不同。]]></description>
</item><item>
    <title>CUE 是如何在 Kubernetes 中使用的</title>
    <link>https://russellgao.cn/cue-kubernetes/</link>
    <pubDate>Mon, 10 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/cue-kubernetes/</guid>
    <description><![CDATA[导读  本文是基于上一篇 CUE是何方神圣 基本介绍后，结合 kubernetes ，看看 kubernetes 是如何使用 CUE 的，内容主要来自 官方教程 。]]></description>
</item><item>
    <title>CUE是何方神圣?</title>
    <link>https://russellgao.cn/cue-intro/</link>
    <pubDate>Sat, 08 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/cue-intro/</guid>
    <description><![CDATA[导读  本片文章主要介绍 CUE 的基本概念，CUE 是什么以及可以做些什么，通过一些 demo 演示了基本的用法，适合小白入门阅读。
 什么是CUE C(Configure：配置) , U(Unify：统一) , E(Execute：执行) 。]]></description>
</item><item>
    <title>yum 踩坑记录</title>
    <link>https://russellgao.cn/yum-error/</link>
    <pubDate>Wed, 14 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/yum-error/</guid>
    <description><![CDATA[导读  yum 在使用过程中会遇到一些奇奇怪怪的问题，这里主要记录遇到的问题已经如何修复。这篇文档会持续更新。
 踩坑1 在执行 yum 命令时报如下错误，不管执行任何命令都一样，如 yum list , yum search ,yum install]]></description>
</item><item>
    <title>Apollo(阿波罗)docker部署记录</title>
    <link>https://russellgao.cn/apollo-deploy-docker/</link>
    <pubDate>Sun, 11 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/apollo-deploy-docker/</guid>
    <description><![CDATA[导读  本文记录根据 Apollo 官方文档部署 Apollo 的过程，值得参考的地方是其中踩的坑。
假设你对 Apollo 有一定的了解，所以对 Apollo 本身不会做太多的介绍，文档可参考 : https://ctripcorp.]]></description>
</item><item>
    <title>Alpine 容器内安装命令时遇到坑</title>
    <link>https://russellgao.cn/linux-alpine-apk/</link>
    <pubDate>Fri, 19 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/linux-alpine-apk/</guid>
    <description><![CDATA[导读  记录在 Alpine 容器内安装命令时遇到的一些问题，本篇文章会持续更新。
问题背景是在docker 容器内执行 docker 命令，执行时发现缺少某些依赖包，在安装依赖包时遇到一些难以解决的问题。
 在容器内执行 docker 命令 在 docker 容器执行 docker 命令，如启动新的容器，需要把主机的 docker sock 套接字映射到容器内 。 具体方法为:]]></description>
</item><item>
    <title>设计模式六大原则</title>
    <link>https://russellgao.cn/design-principle/</link>
    <pubDate>Tue, 19 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/design-principle/</guid>
    <description><![CDATA[导读  重温设计模式的原则
 六大原则 单一职责原则（Single Responsibility Principle）  There should never be more than one reason for a class to change.]]></description>
</item><item>
    <title>消息队列原理之kafka</title>
    <link>https://russellgao.cn/mq-kafka/</link>
    <pubDate>Thu, 17 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/mq-kafka/</guid>
    <description><![CDATA[导读  本文消息队列系列第二篇，上一篇讲述的是 Rabbitmq ，这篇主要介绍 Kafka 的原理与使用。
Kafka 是一个快速、可扩展的、高吞吐的、可容错的分布式“发布-订阅”消息系统， 使用 Scala 与 Java 语言编写，能够将消息从一个端点传递到另一个端点。 较之传统的消息中间件（例如 ActiveMQ、RabbitMQ），Kafka 具有高吞吐量、内置分区、支持消息副本和高容错的特性，非常适合大规模消息处理应用程序。]]></description>
</item><item>
    <title>消息队列原理之rabbitmq</title>
    <link>https://russellgao.cn/mq-rabbitmq/</link>
    <pubDate>Wed, 16 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/mq-rabbitmq/</guid>
    <description><![CDATA[导读  谈起消息队列，我们的脑海可能会不由自主的冒出这么几个关键词，解耦、异步化、消峰、广播等，消息队列的种类也很多，如 rabbitmq、rocketmq、activemq、kafka等还有各个云厂商提供的消息队列。 它们都有各种的特点和使用场景，所以这个系列的文章主要谈各个消息的原理，目前规划了两篇文章，rabbitmq 和 kafka ，其他的暂时还没有用到，还没有深究。
这篇主要介绍 rabbitmq 的原理和基于 golang 如何使用。]]></description>
</item></channel>
</rss>
