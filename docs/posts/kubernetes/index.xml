<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 大大很二</title>
        <link>https://russellgao.cn/posts/kubernetes/</link>
        <description>所有文章 | 大大很二</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>1060745366@qq.com (高维宗(russellgao))</managingEditor>
            <webMaster>1060745366@qq.com (高维宗(russellgao))</webMaster><atom:link href="https://russellgao.cn/posts/kubernetes/" rel="self" type="application/rss+xml" /><item>
    <title>在本地如何玩转kubernetes? - kind</title>
    <link>https://russellgao.cn/k8s-kind/</link>
    <pubDate>Sat, 06 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/k8s-kind/</guid>
    <description><![CDATA[导读  kubernetes 现在已经走进了大众的视野，很多同学都对此比较好奇，从其他渠道或多或少都了解了一些，但是苦于没有kubernetes环境，不能身临其境的感受， 毕竟如果完整搭建一套kubernetes环境是需要资源的。 今天介绍一款工具（kind），让大家可以本地也可以构建起 kubernetes 环境，愉快的在本地玩转 kubernetes。
kind 全称 是 kubernetes in docker ，把 kubernetes 控制面的组件全部运行在一个docker 容器中，在本地通过 127.]]></description>
</item><item>
    <title>kubernetes 中 pod 是如何启动的呢</title>
    <link>https://russellgao.cn/pod-create/</link>
    <pubDate>Tue, 24 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/pod-create/</guid>
    <description><![CDATA[导读  Pod 应该算是 kubernetes 的基本盘，Pod 是 kubernetes 的最小调度单位，我这里有个问题，说通过 kubectl apply -f  创建一个 Pod ，从执行到 Pod 正常运行 kubernetes 做了什么事情呢？都有哪些组件参与呢？这篇文档主要讲述从提交 Pod 的创建请求到 Pod 的正常运行的这个过程追踪。]]></description>
</item><item>
    <title>kubernetes 中patch与update比较</title>
    <link>https://russellgao.cn/patch-update/</link>
    <pubDate>Sat, 21 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/patch-update/</guid>
    <description><![CDATA[导读  不知道你有没有想过一个问题：对于一个 K8s 资源对象比如 Deployment，我们尝试在修改其中 image 镜像时，如果有其他人同时也在对这个 Deployment 做修改，会发生什么？]]></description>
</item><item>
    <title>kubectl 常用命令</title>
    <link>https://russellgao.cn/kubectl-command/</link>
    <pubDate>Fri, 20 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/kubectl-command/</guid>
    <description><![CDATA[导读  kubectl 应该是每个接触 kubernetes 的人都会接触的一个组件，它带给我们强大的命令行体验，本篇文章就是介绍 kubectl 中的一些常用命令，在结合一些具体的使用场景说说如何利用 kubectl 实现。好记性不如烂笔头，在这里尽可能全的罗列，方便后续 用的时候查找。如果能帮到您就收藏起来吧(😄)。]]></description>
</item><item>
    <title>pod 配置文件说明</title>
    <link>https://russellgao.cn/pod%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</link>
    <pubDate>Thu, 18 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://russellgao.cn/pod%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</guid>
    <description><![CDATA[Pod的定义文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135  apiVersion:v1kind:Podmetadata:name:stringnamaspace:stringlabels:- name:stringannotations:- name:stringspec:containers:- name:string# 使用的镜像image:stringimagePullPolicy:[Always|Never|IfNotPresent]command:[string]args:[string]# 工作目录workingDir:stringvolumeMounts:- name:stringmountPath:stringreadOnly:booleanports:- name:stringcontainerPort:inthostPort:intprotocol:stringenv:- name:stringvalue:stringresources:limits:cpu:stringmemory:stringrequests:cpu:stringmemory:stringlivenessProbe:exec:command:[string]httpGet:path:stringport:inthost:stringscheme:stringhttpHeaders:- name:stringvalue:stringtcpSocket:port:int# 多久之后去检查initialDelaySeconds:number# 健康检查超时时间timeoutSeconds:number# 多长时间检查一次periodSeconds:number# 成功的阀值，检查几次成功才算成功successThreshold:0# 失败的阀值，检查几次失败才算失败failureThreshold:0securityContext:# 详细参见 pod_SecurityContext 章节# securityContext 可以配置pod 或者container 级别runAsUser:1000# 运行的用户runAsGroup:3000# 运行的用户组fsGroup:2000privileged:bool# 是否以privileged 权限运行，即这是这个进程拥有特权allowPrivilegeEscalation:bool# 控制一个进程是否能比其父进程获取更多的权限，如果一个容器以privileged权限运行或具有CAP_SYS_ADMIN权限，则AllowPrivilegeEscalation的值将总是truecapabilities:add:[&#34;NET_ADMIN&#34;,&#34;SYS_TIME&#34;,&#34;.]]></description>
</item></channel>
</rss>
