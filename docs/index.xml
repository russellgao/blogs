<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>大大很二</title>
        <link>https://russellgao.cn/</link>
        <description>用技术改变世界</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>1060745366@qq.com (高维宗(russellgao))</managingEditor>
            <webMaster>1060745366@qq.com (高维宗(russellgao))</webMaster>
            <atom:link href="https://russellgao.cn/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>openresty 配置文件 （二）</title>
    <link>https://russellgao.cn/openresty-server/</link>
    <pubDate>Mon, 23 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/openresty-server/</guid>
    <description><![CDATA[导读  这篇是继上一篇 openresty 配置文件 （一） 介绍了 openresty 全局配置之后，介绍 openresty server 配置，server 的配置一般单独放在 conf.]]></description>
</item><item>
    <title>openresty 配置文件 （一）</title>
    <link>https://russellgao.cn/openresty-nginx.conf/</link>
    <pubDate>Sun, 22 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/openresty-nginx.conf/</guid>
    <description><![CDATA[导读  openresty（nginx plus） 在日常工作中用的应该比较多，要想真正了解清楚其原理并不容易。我尝试着从配置的角度去分析 nginx 的基本原理。这篇主要介绍 nginx.conf 这个配置文件，后续再介绍其他的配置文件。
nginx.conf 中主要配置全局配置，配置好之后一般很少改动。]]></description>
</item><item>
    <title>kubernetes 中patch与update比较</title>
    <link>https://russellgao.cn/patch-update/</link>
    <pubDate>Sat, 21 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/patch-update/</guid>
    <description><![CDATA[导读  不知道你有没有想过一个问题：对于一个 K8s 资源对象比如 Deployment，我们尝试在修改其中 image 镜像时，如果有其他人同时也在对这个 Deployment 做修改，会发生什么？]]></description>
</item><item>
    <title>kubectl 常用命令</title>
    <link>https://russellgao.cn/kubectl-command/</link>
    <pubDate>Fri, 20 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/kubectl-command/</guid>
    <description><![CDATA[导读  kubectl 应该是每个接触 kubernetes 的人都会接触的一个组件，它带给我们强大的命令行体验，本篇文章就是介绍 kubectl 中的一些常用命令，在结合一些具体的使用场景说说如何利用 kubectl 实现。好记性不如烂笔头，在这里尽可能全的罗列，方便后续 用的时候查找。如果能帮到您就收藏起来吧(😄)。]]></description>
</item><item>
    <title>markdown中插入表情的方法</title>
    <link>https://russellgao.cn/markdownemoji/</link>
    <pubDate>Thu, 19 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/markdownemoji/</guid>
    <description><![CDATA[导读  markdown 中也是可以插入表情，但并不是所有的markdown 解析器都支持，我本地用的 Goland、MacDown 不支持，但是 hugo 是支持的， 写作的过程可以适当加入一些表情，可以表达当时写作的一个心情。]]></description>
</item><item>
    <title>python中的多线程与多进程（二）</title>
    <link>https://russellgao.cn/concurrent/</link>
    <pubDate>Wed, 18 Nov 2020 22:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/concurrent/</guid>
    <description><![CDATA[导读  在上一篇&ldquo;python中的多线程与多进程(一)中介绍了进程、线程的概念、基本用法和在 python 中使用遇到的一些坑， 这在一篇中会介绍一些高级的用法，当然更多的是遇到的坑，换言之这是一片避坑指南。
 concurrent.futures 我们都知道在 python 中，多线程的标准库是使用 threading , 如 ：]]></description>
</item><item>
    <title>python中的多线程与多进程（一）</title>
    <link>https://russellgao.cn/multithread/</link>
    <pubDate>Mon, 16 Nov 2020 22:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/multithread/</guid>
    <description><![CDATA[导读 在编码的过程，多线程、多进程、并发、并行这些概念肯定不止一次的出现在我们面前。概念理解是一回事，但是能真正用好又是另一回事。不同的编程语言，并发编程难易程度相差还是很大的，正好这几天梳理了他们之间的关系与区别，分享给大家。（基于自己的理解谈谈，如果不对欢迎指出）
 灵魂拷问：什么是线程？什么是进程？
 进程 进程是资源分配的最小单位。
线程 线程是 cpu 调度的最小调度。线程又分为内核线程，用户线程。]]></description>
</item><item>
    <title>istio中的ELK实践</title>
    <link>https://russellgao.cn/elk/</link>
    <pubDate>Tue, 10 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/elk/</guid>
    <description><![CDATA[ELK  这篇文档是由我投稿的云原生社区的文章，节选自 istio-handbook，如果有兴趣可以参考这本书。
 ELK 指的是由 Elasticsearch + Logstash + Kibana 组成的日志采集、存储、展示为一体的日志解决方案，简称 &ldquo;ELK Stack&rdquo;。ELK Stack 还包含 Beats（如Filebeat、Metricbeat、Heartbeat等）、Kafka等成员，是目前主流的一种日志解决方案。]]></description>
</item><item>
    <title>细谈 Golang 中那些设计优美的细节-defer</title>
    <link>https://russellgao.cn/defer/</link>
    <pubDate>Sun, 08 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/defer/</guid>
    <description><![CDATA[背景 在学习和使用 Go 的过程中发现，Go 在语言层面的设计有很多有趣的地方，所以准备用一个系列来细数这些有趣的地方。写这个系列一是为了加深自己的理解，二是愿意分享，分享 Go 中有趣的设计细节。每篇都会通过一个例子讲述一个细节，感兴趣的话可以关注一下哟！
Go 介绍 Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。]]></description>
</item><item>
    <title>如何利用 python 操纵 oracle</title>
    <link>https://russellgao.cn/oracle/</link>
    <pubDate>Thu, 09 Jul 2020 18:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/oracle/</guid>
    <description><![CDATA[安装库 1 2  pip3 install sqlalchemy pip3 install cx_Oracle   安装客户端 oracle 客户端下载页面: https://www.]]></description>
</item></channel>
</rss>
