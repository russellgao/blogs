<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>大大很二的博客</title>
        <link>https://russellgao.cn/</link>
        <description>用技术改变世界</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>1060745366@qq.com (高维宗(russellgao))</managingEditor>
            <webMaster>1060745366@qq.com (高维宗(russellgao))</webMaster>
            <atom:link href="https://russellgao.cn/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>python中的多线程与多进程（二）</title>
    <link>https://russellgao.cn/concurrent/</link>
    <pubDate>Wed, 18 Nov 2020 22:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/concurrent/</guid>
    <description><![CDATA[导读  在上一篇&ldquo;python中的多线程与多进程(一)中介绍了进程、线程的概念、基本用法和在 python 中使用遇到的一些坑， 这在一篇中会介绍一些高级的用法，当然更多的是遇到的坑，换言之这是一片避坑指南。
 concurrent.futures 我们都知道在 python 中，多线程的标准库是使用 threading , 如 ：]]></description>
</item><item>
    <title>python中的多线程与多进程（一）</title>
    <link>https://russellgao.cn/multithread/</link>
    <pubDate>Mon, 16 Nov 2020 22:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/multithread/</guid>
    <description><![CDATA[导读 在编码的过程，多线程、多进程、并发、并行这些概念肯定不止一次的出现在我们面前。概念理解是一回事，但是能真正用好又是另一回事。不同的编程语言，并发编程难易程度相差还是很大的，正好这几天梳理了他们之间的关系与区别，分享给大家。（基于自己的理解谈谈，如果不对欢迎指出）
 灵魂拷问：什么是线程？什么是进程？
 进程 进程是资源分配的最小单位。
线程 线程是 cpu 调度的最小调度。线程又分为内核线程，用户线程。]]></description>
</item><item>
    <title>istio中的ELK实践</title>
    <link>https://russellgao.cn/elk/</link>
    <pubDate>Tue, 10 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/elk/</guid>
    <description><![CDATA[ELK  这篇文档是由我投稿的云原生社区的文章，节选自 istio-handbook，如果有兴趣可以参考这本书。
 ELK 指的是由 Elasticsearch + Logstash + Kibana 组成的日志采集、存储、展示为一体的日志解决方案，简称 &ldquo;ELK Stack&rdquo;。ELK Stack 还包含 Beats（如Filebeat、Metricbeat、Heartbeat等）、Kafka等成员，是目前主流的一种日志解决方案。]]></description>
</item><item>
    <title>细谈 Golang 中那些设计优美的细节-defer</title>
    <link>https://russellgao.cn/defer/</link>
    <pubDate>Sun, 08 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/defer/</guid>
    <description><![CDATA[背景 在学习和使用 Go 的过程中发现，Go 在语言层面的设计有很多有趣的地方，所以准备用一个系列来细数这些有趣的地方。写这个系列一是为了加深自己的理解，二是愿意分享，分享 Go 中有趣的设计细节。每篇都会通过一个例子讲述一个细节，感兴趣的话可以关注一下哟！
Go 介绍 Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。]]></description>
</item><item>
    <title>如何利用 python 操纵 oracle</title>
    <link>https://russellgao.cn/oracle/</link>
    <pubDate>Thu, 09 Jul 2020 18:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/oracle/</guid>
    <description><![CDATA[安装库 1 2  pip3 install sqlalchemy pip3 install cx_Oracle   安装客户端 oracle 客户端下载页面: https://www.]]></description>
</item><item>
    <title>pod 配置文件说明</title>
    <link>https://russellgao.cn/pod%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</link>
    <pubDate>Thu, 18 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/pod%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</guid>
    <description><![CDATA[Pod的定义文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135  apiVersion:v1kind:Podmetadata:name:stringnamaspace:stringlabels:- name:stringannotations:- name:stringspec:containers:- name:string# 使用的镜像image:stringimagePullPolicy:[Always|Never|IfNotPresent]command:[string]args:[string]# 工作目录workingDir:stringvolumeMounts:- name:stringmountPath:stringreadOnly:booleanports:- name:stringcontainerPort:inthostPort:intprotocol:stringenv:- name:stringvalue:stringresources:limits:cpu:stringmemory:stringrequests:cpu:stringmemory:stringlivenessProbe:exec:command:[string]httpGet:path:stringport:inthost:stringscheme:stringhttpHeaders:- name:stringvalue:stringtcpSocket:port:int# 多久之后去检查initialDelaySeconds:number# 健康检查超时时间timeoutSeconds:number# 多长时间检查一次periodSeconds:number# 成功的阀值，检查几次成功才算成功successThreshold:0# 失败的阀值，检查几次失败才算失败failureThreshold:0securityContext:# 详细参见 pod_SecurityContext 章节# securityContext 可以配置pod 或者container 级别runAsUser:1000# 运行的用户runAsGroup:3000# 运行的用户组fsGroup:2000privileged:bool# 是否以privileged 权限运行，即这是这个进程拥有特权allowPrivilegeEscalation:bool# 控制一个进程是否能比其父进程获取更多的权限，如果一个容器以privileged权限运行或具有CAP_SYS_ADMIN权限，则AllowPrivilegeEscalation的值将总是truecapabilities:add:[&#34;NET_ADMIN&#34;,&#34;SYS_TIME&#34;,&#34;.]]></description>
</item><item>
    <title>位运算</title>
    <link>https://russellgao.cn/bit/</link>
    <pubDate>Sat, 30 May 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/bit/</guid>
    <description><![CDATA[位运算 计算机中的数在内存中都是以二进制形式进行存储的，用位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。
位操作符 &amp; 与运算 &amp; 与运算 两个位都是 1 时，结果才为 1，否则为 0，如]]></description>
</item><item>
    <title>二叉搜索树</title>
    <link>https://russellgao.cn/binarysearchtree/</link>
    <pubDate>Tue, 05 May 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/binarysearchtree/</guid>
    <description><![CDATA[定义及特点 二叉查找树（英语：Binary Search Tree），也称为 二叉搜索树、有序二叉树（Ordered Binary Tree）或排序二叉树（Sorted Binary Tree），是指一棵空树或者具有下列性质的二叉树：
 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值； 任意节点的左、右子树也分别为二叉查找树； 没有键值相等的节点。  二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低。为 O(logn)。二叉查找树是基础性数据结构，用于构建更为抽象的数据结构，如集合、多重集、关联数组等。]]></description>
</item></channel>
</rss>
