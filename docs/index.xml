<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>大大很二</title>
        <link>https://russellgao.cn/</link>
        <description>用技术改变世界</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>1060745366@qq.com (高维宗(russellgao))</managingEditor>
            <webMaster>1060745366@qq.com (高维宗(russellgao))</webMaster>
            <atom:link href="https://russellgao.cn/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>如何利用python优化解析xml文件</title>
    <link>https://russellgao.cn/python-maven-enforcer-plugins/</link>
    <pubDate>Tue, 02 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/python-maven-enforcer-plugins/</guid>
    <description><![CDATA[导读  本篇文章意在演示如何利用 python 解析 xml 文件。这篇文章的引出背景是，在程序开发过程中，一贯坚持的做法是「约定优于配置」， 但怎么取检测有没有按照约定去做的，以 maven 为例，maven 提供了 maven-enforcer-plugin 插件，可以用这个插件定制一系列 规则。所以我们需要做的就是用 python 在 pom 文件中插入 maven-enforcer-plugin 的配置 。]]></description>
</item><item>
    <title>Alpine 容器内安装命令时遇到坑</title>
    <link>https://russellgao.cn/linux-alpine-apk/</link>
    <pubDate>Fri, 19 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/linux-alpine-apk/</guid>
    <description><![CDATA[导读  记录在 Alpine 容器内安装命令时遇到的一些问题，本篇文章会持续更新。
问题背景是在docker 容器内执行 docker 命令，执行时发现缺少某些依赖包，在安装依赖包时遇到一些难以解决的问题。
 在容器内执行 docker 命令 在 docker 容器执行 docker 命令，如启动新的容器，需要把主机的 docker sock 套接字映射到容器内 。 具体方法为:]]></description>
</item><item>
    <title>交叉打印</title>
    <link>https://russellgao.cn/go-goroutine-print/</link>
    <pubDate>Thu, 18 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/go-goroutine-print/</guid>
    <description><![CDATA[交叉打印 数字和字母交叉打印，打印两个字母，接着打印一个数字，再接着打印两个字母，一直从 a 打印到 z，以字母结束。输出示例：
1  a b 1 c d 2 .]]></description>
</item><item>
    <title>在本地如何玩转kubernetes? - kind</title>
    <link>https://russellgao.cn/k8s-kind/</link>
    <pubDate>Sat, 06 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/k8s-kind/</guid>
    <description><![CDATA[导读  kubernetes 现在已经走进了大众的视野，很多同学都对此比较好奇，从其他渠道或多或少都了解了一些，但是苦于没有kubernetes环境，不能身临其境的感受， 毕竟如果完整搭建一套kubernetes环境是需要资源的。 今天介绍一款工具（kind），让大家可以本地也可以构建起 kubernetes 环境，愉快的在本地玩转 kubernetes。
kind 全称 是 kubernetes in docker ，把 kubernetes 控制面的组件全部运行在一个docker 容器中，在本地通过 127.]]></description>
</item><item>
    <title>Python 中的装饰器</title>
    <link>https://russellgao.cn/python-decorator/</link>
    <pubDate>Sat, 30 Jan 2021 10:32:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/python-decorator/</guid>
    <description><![CDATA[导读  这篇文章主要介绍了 python 当中的装饰器。
 什么是装饰器 装饰器可以理解为函数的函数，想想这么一种场景，要计算每个函数的执行时间，一种解决方法是在每个函数中做个计时，就可以拿到执行时间， 但是这样会有大量的冗余代码，显然是不可取的，这时候装饰器就派上用场了。
下面直接看代码，代码比文字更有说服力。]]></description>
</item><item>
    <title>设计模式六大原则</title>
    <link>https://russellgao.cn/design-principle/</link>
    <pubDate>Tue, 19 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/design-principle/</guid>
    <description><![CDATA[导读  重温设计模式的原则
 六大原则 单一职责原则（Single Responsibility Principle）  There should never be more than one reason for a class to change.]]></description>
</item><item>
    <title>消息队列原理之kafka</title>
    <link>https://russellgao.cn/mq-kafka/</link>
    <pubDate>Thu, 17 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/mq-kafka/</guid>
    <description><![CDATA[导读  本文消息队列系列第二篇，上一篇讲述的是 Rabbitmq ，这篇主要介绍 Kafka 的原理与使用。
Kafka 是一个快速、可扩展的、高吞吐的、可容错的分布式“发布-订阅”消息系统， 使用 Scala 与 Java 语言编写，能够将消息从一个端点传递到另一个端点。 较之传统的消息中间件（例如 ActiveMQ、RabbitMQ），Kafka 具有高吞吐量、内置分区、支持消息副本和高容错的特性，非常适合大规模消息处理应用程序。]]></description>
</item><item>
    <title>消息队列原理之rabbitmq</title>
    <link>https://russellgao.cn/mq-rabbitmq/</link>
    <pubDate>Wed, 16 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/mq-rabbitmq/</guid>
    <description><![CDATA[导读  谈起消息队列，我们的脑海可能会不由自主的冒出这么几个关键词，解耦、异步化、消峰、广播等，消息队列的种类也很多，如 rabbitmq、rocketmq、activemq、kafka等还有各个云厂商提供的消息队列。 它们都有各种的特点和使用场景，所以这个系列的文章主要谈各个消息的原理，目前规划了两篇文章，rabbitmq 和 kafka ，其他的暂时还没有用到，还没有深究。
这篇主要介绍 rabbitmq 的原理和基于 golang 如何使用。]]></description>
</item><item>
    <title>深入浅出的聊聊 cpu 负载与使用率</title>
    <link>https://russellgao.cn/cpu/</link>
    <pubDate>Tue, 15 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/cpu/</guid>
    <description><![CDATA[导读  在定位性能问题时，一个绕不开的话题就是 CPU ，会觉得 CPU 不够用了，或者是瓶颈了，那么怎么来确定是 CPU 的问题呢？衡量 CPU 的指标有两个，CPU 负载(load average) 和 使用率，这两者有什么关系和区别呢？ 这篇文章带大家深层次的了解一下 CPU 。]]></description>
</item><item>
    <title>git 常用命令</title>
    <link>https://russellgao.cn/git-command/</link>
    <pubDate>Mon, 14 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://russellgao.cn/git-command/</guid>
    <description><![CDATA[导读  这篇文章主要记录了 git 的一些常用命令，后续会持续补充更新。
 常用命令 检出代码 1  git clone url -b git_branch   查看分支 1  git branch -a   创建分支 1  git branch xxx   删除本地分支 1  git branch -d xxxxx   检出分支 1  git checkout git_branch   拉取代码 1  git pull   把修改文件提交到缓冲区 1  git add &lt;filename&gt;   本地提交 1  git commit -m &#34;代码提交信息&#34;   推送代码 1 2  git push origin local_branch:remote_branch 例 : git push origin release/release:release/release   合并代码 1  git merge origin/remote   cherry pick 1  git cherry-pick commit_id   跟踪 1 2  git branch --set-upstream-to=remote_branch local_branch 例 git branch --set-upstream-to=origin/release/release release/release   丢弃本地修改 1 2  git checkout -- file 例 git checkout -- test.]]></description>
</item></channel>
</rss>
